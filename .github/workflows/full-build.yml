name: Full Build

on:
  push:
    branches: ["*"]
    paths:
      - "cdk/**"
      - "execution/**"
      - "integration_tests/**"
      - ".github/workflows/full-build.yml"

  workflow_dispatch:

jobs:
  # CDK jobs
  cdkBuild:
    name: Build Code with Node
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ID_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_KEY_SECRET }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm install
      - name: Build the project
        run: npm run build
      - name: Upload build output
        uses: actions/upload-artifact@v4
        with:
          name: node-build-output-${{ matrix.node-version }}
          path: |
            dist/
            cdk.out/
            logs/
            npm-debug.log*
      - name: Add failure summary
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            core.summary.addHeading('❌ codeBuild failed (Node.js ${{ matrix.node-version }})')
            core.summary.addRaw('Check logs and uploaded artifacts for details.')
            await core.summary.write()

  cdkStackList:
    name: "List CDK Stacks"
    runs-on: ubuntu-latest
    needs: cdkBuild
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ID_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_KEY_SECRET }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: |
          npm install
      - name: List CDK stacks
        run: |
          echo "Listing CDK stacks..."
          cd cdk && npx cdk list

  cdkDiff:
    name: "CDK Diff"
    runs-on: ubuntu-latest
    needs: cdkStackList
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ID_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_KEY_SECRET }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: |
          npm install
      - name: Run CDK diff
        run: |
          echo "Running CDK diff..."
          cd cdk && npx cdk diff

  cdkSynth:
    name: "CDK Synth"
    runs-on: ubuntu-latest
    needs: cdkDiff
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ID_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_KEY_SECRET }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: |
          npm install
      - name: Run CDK synth
        run: |
          echo "Running CDK synth..."
          cd cdk && npx cdk synth

  pythonBuild:
    name: Build Code with Hatch
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install hatch
      - name: Build the project
        run: hatch build
      - name: Upload build output
        uses: actions/upload-artifact@v4
        with:
          name: python-build-output-${{ matrix.python-version }}
          path: |
            dist/
            build/
            logs/
      - name: Add failure summary
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            core.summary.addHeading('❌ codeBuild failed (Python ${{ matrix.python-version }})')
            core.summary.addRaw('Check logs and uploaded artifacts for details.')
            await core.summary.write()

  # Execution jobs
  executionLinting:
    name: "Run Linting Checks (Execution)"
    runs-on: ubuntu-latest
    needs: pythonBuild
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install hatch
      - name: Create Hatch environment
        run: |
          hatch env create
      - name: Build the project
        run: |
          hatch build
      - name: Run isort
        run: |
          echo "Running isort..."
          hatch run dev:isort ./execution --check-only --diff
      - name: Run black
        run: |
          echo "Running black..."
          hatch run dev:black ./execution --check --diff
      - name: Run flake8
        run: |
          echo "Running flake8..."
          hatch run dev:flake8 ./execution

  executionMypy:
    name: "Run MyPy Checks (Execution)"
    runs-on: ubuntu-latest
    needs: executionLinting
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install hatch
      - name: Build the project
        run: |
          hatch build
      - name: Create Hatch environment
        run: |
          hatch env create
      - name: Run mypy
        run: |
          echo "Running mypy..."
          hatch run dev:mypy ./execution

  executionUnitTests:
    name: "Run Unit Tests (Execution)"
    runs-on: ubuntu-latest
    needs: executionMypy
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install hatch
      - name: Build the project
        run: |
          hatch build
      - name: Run unit tests
        run: |
          echo "Running unit tests..."
          hatch test tests/execution

  # Integration jobs
  integrationLinting:
    name: "Run Linting Checks (Integration)"
    runs-on: ubuntu-latest
    needs: pythonBuild
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install hatch
      - name: Create Hatch environment
        run: |
          hatch env create
      - name: Build the project
        run: |
          hatch build
      - name: Run isort
        run: |
          echo "Running isort..."
          hatch run dev:isort ./integration_tests --check-only --diff
      - name: Run black
        run: |
          echo "Running black..."
          hatch run dev:black ./integration_tests --check --diff
      - name: Run flake8
        run: |
          echo "Running flake8..."
          hatch run dev:flake8 ./integration_tests

  integrationMypy:
    name: "Run MyPy Checks (Integration)"
    runs-on: ubuntu-latest
    needs: integrationLinting
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install hatch
      - name: Build the project
        run: |
          hatch build
      - name: Create Hatch environment
        run: |
          hatch env create
      - name: Run mypy
        run: |
          echo "Running mypy..."
          hatch run dev:mypy ./integration_tests

  integrationUnitTests:
    name: "Run Unit Tests (Integration)"
    runs-on: ubuntu-latest
    needs: integrationMypy
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install hatch
      - name: Build the project
        run: |
          hatch build
      - name: Run unit tests
        run: |
          echo "Running unit tests..."
          hatch test tests/integration_tests
