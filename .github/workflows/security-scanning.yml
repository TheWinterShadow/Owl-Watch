name: Security Scanning

on:
  workflow_run:
    workflows: ["CDK Build", "Execution Build", "Integration Build"]
    types:
      - completed
    branches:
      - master

jobs:
  executionSecurityScan:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    name: Run Security Scan on Execution Code
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install hatch
      - name: Build the project
        run: hatch build
      - name: Run Bandit Scan
        run: hatch run dev:bandit -r ./execution
      - name: Upload bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report-execution-${{ matrix.python-version }}
          path: logs/
      - name: Add failure summary
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            core.summary.addHeading('❌ executionSecurityScan failed (Python ${{ matrix.python-version }})')
            core.summary.addRaw('Check logs and uploaded artifacts for details.')
            await core.summary.write()

  integrationTestsSecurityScan:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    name: Run Security Scan on Integration Tests Code
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install hatch
      - name: Build the project
        run: hatch build
      - name: Run Bandit Scan
        run: hatch run dev:bandit -r ./integration_tests
      - name: Upload bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report-integration-${{ matrix.python-version }}
          path: logs/
      - name: Add failure summary
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            core.summary.addHeading('❌ integrationTestsSecurityScan failed (Python ${{ matrix.python-version }})')
            core.summary.addRaw('Check logs and uploaded artifacts for details.')
            await core.summary.write()

  cdkSecurityScan:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    name: Run Security Scan on CDK Code
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm install
      - name: Build the project
        run: npm run build
      - name: Run CFN Nag Scan
        uses: stelligent/cfn_nag@v0.8.10
        with:
          input_path: ./cdk
          extra_args: --fail-on-warnings -o json
      - name: Upload cfn_nag report
        uses: actions/upload-artifact@v4
        with:
          name: cfn-nag-report-${{ matrix.node-version }}
          path: logs/
      - name: Add failure summary
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            core.summary.addHeading('❌ cdkSecurityScan failed (Node.js ${{ matrix.node-version }})')
            core.summary.addRaw('Check logs and uploaded artifacts for details.')
            await core.summary.write()
